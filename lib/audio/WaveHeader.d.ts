/// <reference types="node" />
export default class WaveHeader {
    /**
     * Generates the Wave Header
     * Writes a pcm wave header to a buffer and returns it as a buffer
     *
     * Based on: https://github.com/Wpdas/wave-header
     * Reference: http://www.topherlee.com/software/pcm-tut-wavformat.html
     *
     * @param {number} length file size
     * @param {Object} options default -> {channels: 1, sampleRate: 44100, bitDepth: 16}
     */
    static generateHeader: (length: number, options: any) => any;
    /**
     * Reads a pcm wave header from a buffer and returns the information
     * @param {Buffer} buffer wave buffer chunk
     */
    static readHeader: (buffer: any) => {
        riffHead: any;
        fileSize: any;
        waveHead: any;
        fmtHead: any;
        formatLength: any;
        audioFormat: any;
        channels: any;
        sampleRate: any;
        byteRate: any;
        blockAlign: any;
        bitDepth: any;
        data: any;
        dataLength: any;
    };
    /**
     * Clean up the old header. If a new header is added to the buffer, there're two headers wrote.
     * This method will clean up the second one that is in a position that should be used only for wave samples.
     * @param {Buffer} buffer
     * @returns {Buffer}  Returns buffer containing only the wave samples
     */
    static cleanUpOldHeader: (buffer: any) => Buffer;
    /**
     * Rewrites the header information in a chunk of buffer. Must be used the first chunk of buffer from a
     * .wav file.
     * @param {Buffer} waveHeaderBuffer buffer containing the wave header generated by generateHeader(...) method
     * @param {Buffer} buffer chunk of buffer received by "on data" event
     * @returns {Buffer}  Returns buffer containing the new header and wave samples from the original buffer
     */
    static rewriteHeaderInBufferChunk: (waveHeaderBuffer: any, buffer: any) => Buffer;
}
